apply plugin: "java"
apply plugin: 'application'

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "net.mgsx.pd.demo.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

task runLocal(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir){
    	exclude 'pd', 'pdmidi', 'music'
    }
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

startScripts{
	mainClassName = project.mainClassName
	applicationName = "gdx-pd-demo"
	// classpath += files(project.assetsDir)
}

distributions.main.baseName = "gdx-pd-demo"
applicationDistribution.from(project.assetsDir) {
    into "bin"
}

def runPackr(String target, String jre) {
   def assets = new File(projectDir.parent, 'android/assets').path
   def username = System.properties['user.name']
   def uid = ["id", "-u", username].execute().text.trim()
   def gid = ["id", "-g", username].execute().text.trim()
   exec {
        executable "docker"
        args("run", "-t", "--rm", "-v", "$projectDir:/work", "-v", "$assets:/assets", 
        	"-u", "$uid:$gid",
        	"mgsx/libgdx", "java", '-jar', '/libgdx/packr.jar', 
        	"--platform", target,
     		"--jdk", "/libgdx/openjdk-1.7.0-u80-unofficial-$jre-image.zip",
     		"--executable", "$appName",
     		"--classpath", "build/libs/desktop-${version}.jar",
     		"--mainclass", project.mainClassName,
     		"--vmargs", "Xmx1G",
     		"--resources", "/assets/pd", "/assets/pdmidi", "/assets/music",
     		"--minimizejre", "packr/min.json",
     		"--output", "build/packr/$target",
     		"--verbose")
    }
}

task packDist {
    doLast {
        runPackr("linux64", "linux-amd64")
        runPackr("windows64", "windows-amd64")
        runPackr("mac", "macosx-x86_64")
    }
}

packDist.dependsOn dist

task packDistNoJre(type: Zip) {
	baseName = appName
	appendix = 'all-platforms'
    classifier = 'no-jre'
    from files('build/libs'){
    	include '*.jar'
    	fileMode = 0755
    }
    from files(project.assetsDir){
    	include 'pd/*', 'pdmidi/*', 'music/*'
    }
    destinationDir file('build/dist')
}

packDistNoJre.dependsOn dist


eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}